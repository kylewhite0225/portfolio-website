{
	"software-section": [
		{
			"img-src": "./assets/images/software/java-logo.png",
			"bg-position": "0% 0%",
			"img-title": "Java Logo",
			"card-text": "Java",
			"data-target": "#javamodal",
			"modal-id": "javamodal",
			"modal-title": "Java Experience",
			"modal-body": "Object-oriented programming in Java, including command line (CLI) applications, database applications, simple algorithms, and API adapters."
		},
		{
			"img-src": "./assets/images/software/Csharp_Logo.png",
			"bg-position": "17% 0%",
			"img-title": ".NET Logo",
			"card-text": ".NET / C#",
			"data-target": "#netmodal",
			"modal-id": "netmodal",
			"modal-title": ".NET / C# Experience",
			"modal-body": "Object-oriented programming experience in C#, with a focus on cloud, cloud-hybrid, and cloud-interfacing applications with Amazon Web Services. Some of these applications are featured in my Software Portfolio section."
		},
		{
			"img-src": "./assets/images/software/cplus-logo.png",
			"bg-position": "34% 0%",
			"img-title": "C++ Logo",
			"card-text": "C++",
			"data-target": "#cplusmodal",
			"modal-id": "cplusmodal",
			"modal-title": "C++ Experience",
			"modal-body": "Object-oriented programming experience in C++. My data structures course was instructed in C++"
		},
		{
			"img-src": "./assets/images/software/python-logo.png",
			"bg-position": "51% 0%",
			"img-title": "Python Logo",
			"card-text": "Python",
			"data-target": "#pythonmodal",
			"modal-id": "pythonmodal",
			"modal-title": "Python Experience",
			"modal-body": "Machine learning, statistics, data science, and simple scripting tools using Python."
		},
		{
			"img-src": "./assets/images/software/n-react-logo.png",
			"bg-position": "0% 30%",
			"img-title": "React Logo",
			"card-text": "React",
			"data-target": "#reactmodal",
			"modal-id": "reactmodal",
			"modal-title": "React Experience",
			"modal-body": "Web application development with React, including components, hooks, and state management. The front end of NCRP was built using React, as well as my simple Robofriends website project."
		},
		{
			"img-src": "./assets/images/software/react-native-logo.png",
			"bg-position": "17% 30%",
			"img-title": "React Native Logo",
			"card-text": "React Native",
			"data-target": "#reactnativemodal",
			"modal-id": "reactnativemodal",
			"modal-title": "React Experience",
			"modal-body": "Basic cross-platform Android/iOS app development using React Native, including my simple Focus Time app."
		},
		{
			"img-src": "./assets/images/software/JavaScript-logo.png",
			"bg-position": "34% 30%",
			"img-title": "JS Logo",
			"card-text": "JavaScript",
			"data-target": "#jsmodal",
			"modal-id": "jsmodal",
			"modal-title": "JavaScript Experience",
			"modal-body": "JavaScript experience mainly constrained to web applications (including this website), React, and React Native applications, including Node.js for package management, version management, and dependency management."
		},
		{
			"img-src": "./assets/images/software/kubernetes-logo.png",
			"bg-position": "51% 30%",
			"img-title": "Kubernetes Logo",
			"card-text": "Kubernetes",
			"data-target": "#kubermodal",
			"modal-id": "kubermodal",
			"modal-title": "Kubernetes Experience",
			"modal-body": "Kubernetes is the backbone of NCRP. The cluster hosts the frontend web application, OpenSearch service, GeoServer service, Ray (machine learning) service, etc."
		},
		{
			"img-src": "./assets/images/software/docker-logo.webp",
			"bg-position": "0% 60%",
			"img-title": "Docker Logo",
			"card-text": "Docker",
			"data-target": "#dockermodal",
			"modal-id": "dockermodal",
			"modal-title": "Docker Experience",
			"modal-body": "Docker containers package the services running on the NCRP web application."
		},
		{
			"img-src": "./assets/images/software/cloud-computing-white.png",
			"bg-position": "17% 60%",
			"img-title": "Cloud Logo",
			"card-text": "Cloud Computing",
			"data-target": "#cloudmodal",
			"modal-id": "cloudmodal",
			"modal-title": "Cloud Computing Experience",
			"modal-body": "Cloud, cloud-hybrid, and cloud-interfacing applications using .NET/C# with Amazon Web Services, as well as technologies such as Kubernetes for modular and scalable cloud-based distributed applications. Some of the Amazon Web Services utilized include S3, EC2, Lambda, Simple Queue Service, Simple Notification Service, Rekognition, Textract, Translate, Cloud Watch, Database Services (RDS, NoSQL), Event Bridge, Amplify, etc."
		},
		{
			"img-src": "./assets/images/software/htmlcss-logo.png",
			"bg-position": "34% 60%",
			"img-title": "HTML/CSS Logo",
			"card-text": "HTML / CSS",
			"data-target": "#htmlcssmodal",
			"modal-id": "htmlcssmodal",
			"modal-title": "HTML / CSS Experience",
			"modal-body": "I built this website! Bootstrap elements were utilized for modularity, many of which were populated using JavaScript and data stored in JSON. CSS was utilized for styling and for responsive design which helps adjust and scale components for different screen sizes."
		},
		{
			"img-src": "./assets/images/software/machine-learning-logo.png",
			"bg-position": "51% 60%",
			"img-title": "ML Logo",
			"card-text": "Machine Learning",
			"data-target": "#mlmodal",
			"modal-id": "mlmodal",
			"modal-title": "Machine Learning Experience",
			"modal-body": "Machine learning algorithms such as the ID3 decision tree and artificial neural network algorithms written in Python, as well as the utilization of cloud-based machine learning packages such as AWS Rekognition and Tensorflow."
		},
		{
			"img-src": "./assets/images/software/aws-light-logo.png",
			"bg-position": "0% 90%",
			"img-title": "AWS Logo",
			"card-text": "AWS",
			"data-target": "#awsmodal",
			"modal-id": "awsmodal",
			"modal-title": "AWS Experience",
			"modal-body": "Amazon Web Services utilized include S3, EC2, Lambda, Simple Queue Service, Simple Notification Service, Rekognition, Textract, Translate, Cloud Watch, Database Services (RDS, NoSQL), Event Bridge, Amplify, etc."
		},
		{
			"img-src": "./assets/images/software/cicd-logo.png",
			"bg-position": "51% 90%",
			"img-title": "CI/CD Logo",
			"card-text": "CI/CD",
			"data-target": "#cicdmodal",
			"modal-id": "cicdmodal",
			"modal-title": "CI/CD Experience",
			"modal-body": "Continuous implementation/continuous deployment through AWS Amplify. This website is deployed through Amplify which greatly simplifies deployment of the web application, and builds/updates the deployment any time the GitHub repository is updated."
		},
		{
			"img-src": "./assets/images/software/database-centered-logo.png",
			"bg-position": "17% 90%",
			"img-title": "Databases Logo",
			"card-text": "Database Systems",
			"data-target": "#dbmodal",
			"modal-id": "dbmodal",
			"modal-title": "Database Systems Experience",
			"modal-body": "Database management and application development with relational database technologies such as MySQL and PostgreSQL, and NoSQL database technologies such as MongoDB and AWS DynamoDB."
		},
		{
			"img-src": "./assets/images/software/iot-logo.png",
			"bg-position": "34% 90%",
			"img-title": "IOT Logo",
			"card-text": "IoT Devices",
			"data-target": "#iotmodal",
			"modal-id": "iotmodal",
			"modal-title": "IoT Device Experience",
			"modal-body": "Arduino, Raspberry Pi, and various sensors and modules that interact with these devices such as ESP32 and NodeMCU development boards, LEDs, motor controllers, etc."
		}
	],
	"portfolio-section": [
		{
			"card-title": "Artificial Neural Network - MNIST",
			"img-src": "./assets/images/portfolio/mnist.png",
			"highlight": true,
			"badges": [
				"python",
				"jupyter",
				"ml"
			],
			"db-tech": "",
			"card-text": "This project is an exploration of artificial neural networks using the small batch backpropagation algorithm. Each image in the MNIST dataset is broken down into a 1 x 784 array (28x28 pixels) which is fed into the input layer of the newtork. The output of the network is the predicted digit that matches the handwritten input.",
			"github-link": "https://github.com/kylewhite0225/ann-mnist"
		},
		{
			"card-title": "Cloud Vaccine Information Database",
			"img-src": "./assets/images/portfolio/aws-cloud.png",
			"highlight": true,
			"badges": [
				"csharp",
				"aws",
				"cloud",
				"db"
			],
			"db-tech": "PostgreSQL",
			"card-text": "This project includes a utility for uploading XML/JSON objects to Amazon S3, triggering a serverless AWS Lambda function to parse the file, which then formulates a query and stores the information in an AWS RDS PostgreSQL instance.",
			"github-link": "https://github.com/kylewhite0225/cloud-compute-vax-lambda"
		},
		{
			"card-title": "Cloud/Local Hybrid Ticket Generator",
			"img-src": "./assets/images/portfolio/aws-cloud.png",
			"highlight": true,
			"badges": [
				"csharp",
				"aws",
				"cloud",
				"ml"
			],
			"db-tech": "",
			"card-text": "This project includes a utility for uploading license plate images to Amazon S3, triggering a serverless AWS Lambda function which scans the plate using AWS Textract machine learning service. A JSON message is placed in an AWS SQS downward queue containing the plate number and violation. A Windows service polls the queue, then responds with vehicle owner information in an upward queue. A second Lambda function translates a message using AWS Translate and sends it to the fictional vehicle owner via AWS SNS.",
			"github-link": "https://github.com/kylewhite0225/cloud-hybrid-patient-db/"
		},
		{
			"card-title": "Portfolio Website",
			"img-src": "./assets/images/portfolio/portfolio-logo-white.png",
			"highlight": true,
			"badges": [
				"bs",
				"html",
				"css",
				"js"
			],
			"db-tech": "",
			"card-text": "This website! It was built using Bootstrap components, HTML, CSS, and JavaScript for animations. jQuery was used for responsiveness and compatibility. Module automation (sections with repeated card elements) was handled with JavaScript and JSON. CI/CD was handled through AWS Amplify.",
			"github-link": "https://github.com/kylewhite0225/portfolio-website"
		},
		{
			"card-title": "Cloud/Local Hybrid Patient Database",
			"img-src": "./assets/images/portfolio/aws-cloud.png",
			"highlight": true,
			"badges": [
				"csharp",
				"aws",
				"cloud"
			],
			"db-tech": "",
			"card-text": "This project includes a utility for uploading XML objects to Amazon S3, triggering a serverless AWS Lambda function which places a JSON message in an AWS SQS downward queue which is being monitored by a Windows service. This service responds with patient information in an upward queue is printed to Cloudwatch by a second Lambda function.",
			"github-link": "https://github.com/kylewhite0225/cloud-hybrid-patient-db/"
		},
		{
			"card-title": "ID3 - Decision Tree Algorithm",
			"img-src": "./assets/images/portfolio/decision-tree.png",
			"highlight": true,
			"badges": [
				"python",
				"jupyter",
				"ml"
			],
			"db-tech": "",
			"card-text": "This project is an implementation of the ID3 Decision Tree Algorithm written in Python. Several helper functions were created for gathering entropy and information gain, choosing the best features of a dataset (based on information gain), returning a prediction from the model, etc. A 30000 row dataframe of US Census data was used for training and testing.",
			"github-link": "https://github.com/kylewhite0225/ID3"
		},
		{
			"card-title": "Focus Time App",
			"img-src": "./assets/images/software/react-native-logo.png",
			"highlight": true,
			"badges": [
				"reactn",
				"js",
				"html",
				"css"
			],
			"db-tech": "PostgreSQL",
			"card-text": "This is a cross-platform mobile application built using React Native for staying on task and keeping track of focused items.",
			"github-link": "https://github.com/kylewhite0225/focustimeapp"
		},
		{
			"card-title": "Robofriends",
			"img-src": "./assets/images/portfolio/robofriends.png",
			"highlight": false,
			"badges": [
				"react",
				"js",
				"html",
				"css"
			],
			"db-tech": "",
			"card-text": "Robofriends is a simple webpage made with React as part of the React Native Zero to Mastery course on Udemy.",
			"github-link": "https://github.com/kylewhite0225/robofriends"
		},
		{
			"card-title": "IMDB Movie Database",
			"img-src": "./assets/images/software/java-logo.png",
			"highlight": false,
			"badges": [
				"java"
			],
			"db-tech": "",
			"card-text": "This project implements a movie database by reading from a CSV into an array, which is then loaded into a hash table of red-black trees. Each red-black tree provides different search functionality: by year, IMDB score, language, and content rating. The application prints out information for all of the movies in a search result set.",
			"github-link": "https://github.com/kylewhite0225/movie-database"
		},
		{
			"card-title": "Convex Hull Builder",
			"img-src": "./assets/images/software/java-logo.png",
			"highlight": false,
			"badges": [
				"java"
			],
			"db-tech": "",
			"card-text": "A convex hull is a series of line segments that surround a cluster of points, which is constructed in this program by use of an algorithm called Graham Scan.",
			"github-link": "https://github.com/kylewhite0225/convex_hull"
		},
		{
			"card-title": "UPC Reader",
			"img-src": "./assets/images/software/cplus-logo.png",
			"highlight": false,
			"badges": [
				"cplus"
			],
			"db-tech": "",
			"card-text": "This package is a simple UPC reader application. A list of common items and their UPC is stored in CSV format, and the file is read into a binary search tree. This program allows the user to search by UPC, which returns the item description and the lookup time.",
			"github-link": "https://github.com/kylewhite0225/UPC-Reader"
		},
		{
			"card-title": "Basic Unix Shell",
			"img-src": "./assets/images/software/c-logo.png",
			"highlight": false,
			"badges": [
				"c"
			],
			"db-tech": "",
			"card-text": "This is a basic unix shell with three built in commands: cd (change directory), pwd (print working directory), and exit. External commands are handled by a function that tokenizes the input, creates a child using fork(), passes the arguments to the child using execvp, and then waits for the child to terminate.",
			"github-link": "https://github.com/kylewhite0225/basic-unix-shell"
		},
		{
			"card-title": "Concurrency Webserver",
			"img-src": "./assets/images/software/c-logo.png",
			"highlight": false,
			"badges": [
				"c"
			],
			"db-tech": "",
			"card-text": "The goal of this project was to take a single-threaded web server and convert it into a multi-threaded web server using a producer thread, buffer, consumer threads, locks, and condition variable signaling.",
			"github-link": "https://github.com/kylewhite0225/concurrency-webserver"
		}
	],
	"mech-section": [
		{
			"card-text": "Pagani Zonda Surface Model",
			"img-src": "./assets/images/mechanical/portfolio-img1.jpg",
			"img-title": "Pagani Zonda Surface Model",
			"data-target": "#mech1",
			"modal-id": "mech1",
			"modal-title": "Pagani Zonda Surface Model",
			"modal-body": "This is a surface CAD model built in CATIA V5 using a 3D scan of a toy Pagani Zonda. The 3D scan data was captured as a point cloud then converted into a mesh structure. A set of wireframe geometry was then built upon this structure. Surfaces were generated from this wireframe geometry using various techniques, and materials were applied for rendering."
		},
		{
			"card-text": "Viking 58 Front Suspension",
			"img-src": "./assets/images/mechanical/portfolio-img5.jpg",
			"img-title": "Front Wheel Hub",
			"data-target": "#mech2",
			"modal-id": "mech2",
			"modal-title": "Viking 58 Front Suspension",
			"modal-body": "Pictured is the outboard view of the front suspension with the front wheel hub, spindle, brake rotor, brake caliper, and carbon fiber chassis visible. The rotor and wheel hub are pocketed extensively for weight reduction and for better heat dissipation as the brakes convert kinetic energy into thermal energy during stopping. The 7075-T6 aluminum hub has been hard anodized for surface durability, and the 4340 steel spindle has been bored through for weight reduction. The aluminum wheel hub is mounted to the steel spindle via an interference fit, and the brake calipter is mounted with a waterjet steel bracket that is visible in the rear view of the front suspension."
		},
		{
			"card-text": "Viking 58 Front Suspension",
			"img-src": "./assets/images/mechanical/portfolio-img8.jpg",
			"img-title": "Front Suspension",
			"data-target": "#mech3",
			"modal-id": "mech3",
			"modal-title": "Viking 58 Front Suspension",
			"modal-body": "Pictured is inboard view of the front suspension assembly of Viking 58, with the upright, brake rotor, wheel hub, control arms, pushrod, brake caliper, brake caliper mounting arm, mounting clevises, steering link, and castellated bearing retention nut visible. This package was modeled and analyzed in CATIA V5, and the upright was machined by myself on a Haas VF-4 CNC Mill."
		},
		{
			"card-text": "Viking 58 Rear Suspension",
			"img-src": "./assets/images/mechanical/portfolio-img2.jpg",
			"img-title": "Rear Suspension",
			"data-target": "#mech4",
			"modal-id": "mech4",
			"modal-title": "Viking 58 Rear Suspension",
			"modal-body": "Pictured is the rear suspension assembly of Viking 58, with components such as the drive axle, push rod, bellcrank, upright, control arms, and brake rotor visible. This package was modeled and analyzed in CATIA V5. The inboard CV (constant velocity) axle joints and bellcranks were machined by myself on a Haas VF-4 CNC Mill."
		},
		{
			"card-text": "Viking 58 Rear Wheel Hub",
			"img-src": "./assets/images/mechanical/portfolio-img3.jpg",
			"img-title": "Rear Wheel Hub",
			"data-target": "#mech5",
			"modal-id": "mech5",
			"modal-title": "Viking 58 Rear Wheel Hub",
			"modal-body": "Pictured is the rear wheel hub, which is extensively pocketed for weight reduction. Stiffening ribs were added to ensure that the vehicle can still move under power with backup drive pins in the case of a failure that may reduce the drive friction at the interface between the wheel hub and the wheel. A constant velocity interface is integrated on the underside of the hub, and the steel stud is threaded through the back. This component assembly was modeled and analyzed in CATIA V5."
		},
		{
			"card-text": "WWU Racing Viking 58",
			"img-src": "./assets/images/mechanical/portfolio-img4.jpg",
			"img-title": "Viking 58",
			"data-target": "#mech6",
			"modal-id": "mech6",
			"modal-title": "WWU Racing Viking 58",
			"modal-body": "This is the completed viking 58 race car which was brought to competition in Lincoln, NE in June of 2017, one year after I graduated. The chassis of the vehicle is composed of a carbon fiber composite monocoque and a steel tube subframe. The vehicle is powered by a 600cc Honda CBR RR engine, with a custom intake manifold governed by a regulatory 10 mm restriction. The supsension is composed of a double wishbone setup with rocker actuated Cane Creek air dampers normally fitted on mountain bikes. Each corner package consists of a custom upright, spindle, bearing package, wheel hub, and braking interface (designed by myself), as well as the brake rotors and Wilwood brakes. The suspension components were used on two more successive generations of vehicles. All components were modeled, assembled, analyzed, and simulated using CATIA V5. "
		},
		{
			"card-text": "BMW M20B25 Cylinder Head",
			"img-src": "./assets/images/mechanical/portfolio-img7.jpg",
			"img-title": "BMW M20B25",
			"data-target": "#mech7",
			"modal-id": "mech7",
			"modal-title": "BMW M20B25 Cylinder Head",
			"modal-body": "Pictured is the partially assembled head from the 2.5 liter inline 6 that powers the BMW 325is. Disassembly and assembly was perfomed by myself, and a new set of rockers, camshaft, and rocker shafts were installed. Along with the head refurbishment came replacement of all head and intake gaskets as well as the timing belt, water pump, cooling hoses, and radiator. The head was checked for flatness, machined, pressure tested, and had the valve seals replaced and seats ground by C&D machine in Kirkland, WA."
		},
		{
			"card-text": "BMW 325is Engine Bay",
			"img-src": "./assets/images/mechanical/portfolio-img6.jpg",
			"img-title": "Engine Bay",
			"data-target": "#mech8",
			"modal-id": "mech8",
			"modal-title": "BMW 325is Engine Bay",
			"modal-body": "Pictured is the engine bay of my 1988 BMW 325is that I picked up during my time at WWU as a project and for personal transportation. During the Spring of 2020, I embarked on a complete refurbishment of the top end of the engine accompanied by a thorough steam clean of the engine bay, with fresh powdercoating on many of the visible components."
		},
		{
			"card-text": "1988 BMW 325is",
			"img-src": "./assets/images/mechanical/325is-portfolio.jpg",
			"img-title": "1988 BMW 325is",
			"data-target": "#mech9",
			"modal-id": "mech9",
			"modal-title": "1988 BMW 325is",
			"modal-body": "Pictured is the exterior of my 1988 BMW 325is that I purchased in 2013 as a project and for personal transportation. Some of the work I have performed includes the engine refurbishment as pictured and a complete suspension overhaul including springs, dampers, anti-roll bars, linkages, bushings, rear subframe, and strut mounts. While the rear subframe was out, I had the subframe and control arms powder coated, and replaced the shifter linkage, short shifter, driveline, one drive axle, and center support bearing. I replaced the steering rack with a faster ratio conversion in 2014, and completed a brake overhaul including pads, rotors, and rebuilding of the calipers in 2015. The seats were replaced with reupholstered seats, carpet replaced, and entire dashboard replaced in 2016."
		}
	]
}